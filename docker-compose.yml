version: "3.8"

services:
  idp-fridge-app-db:
    image: postgres:13.2-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: idp-fridge-app
      POSTGRES_DB: idp-fridge-app
      POSTGRES_PASSWORD: idp-fridge-app
    volumes:
      - idp-fridge-app-db-vol:/var/lib/postgresql/data
    networks:
      - database
      - database-admin
    deploy:
      placement:
        constraints: [node.role == manager]  # needs this because it has a volume

  idp-fridge-app-crud:
    image: stefanoctavian/idp-fridge-app-crud:latest
    ports:
      - 5000:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    env_file:
      - /root/secrets/crud.env
    depends_on:
      - idp-fridge-app-db
    networks:
      - database
      - auth
      - bl
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure

  idp-fridge-app-auth:
    image: stefanoctavian/idp-fridge-app-auth:latest
    ports:
      - 5001:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    env_file:
      - /root/secrets/auth.env
    logging:
      driver: loki
      options:
        loki-url: http://host.docker.internal:3100/loki/api/v1/push
        loki-external-labels: job=myjob,owner=stefan,environment=production
    depends_on:
      - idp-fridge-app-crud
    deploy:
      replicas: 3
    networks:
      - internal
      - auth
      - monitoring
      - logging

  idp-fridge-app-bl:
    image: stefanoctavian/idp-fridge-app-bl:latest
    ports:
      - 5002:8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    env_file:
      - /root/secrets/bl.env
    depends_on:
      - idp-fridge-app-crud
    deploy:
      replicas: 3
    networks:
      - internal
      - bl

  adminer:
    image: adminer
    ports:
        - 8080:8080
    networks:
        - database-admin
    depends_on:
        - idp-fridge-app-db

  kong:
    image: kong:latest
    volumes:
      - ./Kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 80:8000
      - 443:8443
      - 8001:8001
      - 8444:8444
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - internal
      - database-admin

  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - 9443:9443
      - 9000:9000
      - 8000:8000
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
    depends_on:
      - agent

  prometheus:
    image: prom/prometheus
    volumes:
      - ./configs/prometheus/prometheus-nexporter.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - monitoring

  node_exporter:
    image: prom/node-exporter
    deploy:
      mode: global
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring

  loki:
    image: grafana/loki
    volumes:
      - ./configs/loki/loki.yml:/etc/config/loki.yml
      - ./configs/loki/wal:/wal
    entrypoint:
      - /usr/bin/loki
      - -config.file=/etc/config/loki.yml
    ports:
        - 3100:3100
    networks:
      - logging

  grafana:
    image: grafana/grafana
    volumes:
      - grafana-volume:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - loki
    deploy:
      placement:
          constraints: [node.role == manager]
    networks:
      - visualizing
      - logging


volumes:
  idp-fridge-app-db-vol:
  portainer_data:
  grafana-volume:


networks:
  database:
  database-admin:
  internal:
  auth:
  bl:
  agent_network:
    driver: overlay
    attachable: true
  monitoring:
  logging:
  visualizing:
    
    
